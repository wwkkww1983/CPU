$date
	Sat Nov 30 13:43:11 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 32 ! base_ram_data [31:0] $end
$var wire 32 " ext_ram_data [31:0] $end
$var wire 23 # flash_a [22:0] $end
$var wire 1 $ flash_byte_n $end
$var wire 1 % flash_ce_n $end
$var wire 16 & flash_d [15:0] $end
$var wire 1 ' flash_oe_n $end
$var wire 1 ( flash_rp_n $end
$var wire 1 ) flash_vpen $end
$var wire 1 * flash_we_n $end
$var wire 1 + rxd $end
$var wire 1 , txd $end
$var wire 16 - leds [15:0] $end
$var wire 1 . ext_ram_we_n $end
$var wire 1 / ext_ram_oe_n $end
$var wire 1 0 ext_ram_ce_n $end
$var wire 4 1 ext_ram_be_n [3:0] $end
$var wire 20 2 ext_ram_addr [19:0] $end
$var wire 8 3 dpy1 [7:0] $end
$var wire 8 4 dpy0 [7:0] $end
$var wire 1 5 clk_50M $end
$var wire 1 6 clk_11M0592 $end
$var wire 1 7 base_ram_we_n $end
$var wire 1 8 base_ram_oe_n $end
$var wire 1 9 base_ram_ce_n $end
$var wire 4 : base_ram_be_n [3:0] $end
$var wire 20 ; base_ram_addr [19:0] $end
$var reg 1 < clock_btn $end
$var reg 32 = dip_sw [31:0] $end
$var reg 1 > reset_btn $end
$var reg 4 ? touch_btn [3:0] $end
$scope module base1 $end
$var wire 16 @ DataIO [15:0] $end
$var wire 1 A LB_n $end
$var wire 1 B UB_n $end
$var wire 1 7 WE_n $end
$var wire 1 8 OE_n $end
$var wire 1 9 CE_n $end
$var wire 20 C Address [19:0] $end
$var reg 20 D Address_read1 [19:0] $end
$var reg 20 E Address_read2 [19:0] $end
$var reg 20 F Address_write1 [19:0] $end
$var reg 20 G Address_write2 [19:0] $end
$var reg 64 H LB_n_start_time [63:0] $end
$var reg 64 I UB_n_start_time [63:0] $end
$var reg 1 J WE_dly $end
$var reg 1 K activate_cebar $end
$var reg 1 L activate_webar $end
$var reg 1 M activate_wecebar $end
$var reg 16 N dataIO1 [15:0] $end
$var reg 16 O data_read [15:0] $end
$var reg 1 P initiate_read1 $end
$var reg 1 Q initiate_read2 $end
$var reg 1 R initiate_write1 $end
$var reg 1 S initiate_write2 $end
$var reg 1 T initiate_write3 $end
$var reg 64 U read_CE_n_start_time [63:0] $end
$var reg 64 V read_OE_n_start_time [63:0] $end
$var reg 64 W read_WE_n_start_time [63:0] $end
$var reg 64 X read_address_add [63:0] $end
$var reg 64 Y read_address_oe [63:0] $end
$var reg 64 Z read_address_time [63:0] $end
$var reg 64 [ taa [63:0] $end
$var reg 64 \ tace [63:0] $end
$var reg 64 ] tah [63:0] $end
$var reg 64 ^ tas [63:0] $end
$var reg 64 _ taw [63:0] $end
$var reg 64 ` tba [63:0] $end
$var reg 64 a tbhz [63:0] $end
$var reg 64 b tblz [63:0] $end
$var reg 64 c tbw [63:0] $end
$var reg 64 d tchz [63:0] $end
$var reg 64 e tclz [63:0] $end
$var reg 64 f tcw [63:0] $end
$var reg 64 g tdh [63:0] $end
$var reg 64 h tdw [63:0] $end
$var reg 64 i temptaa [63:0] $end
$var reg 64 j temptoe [63:0] $end
$var reg 64 k toe [63:0] $end
$var reg 64 l toh [63:0] $end
$var reg 64 m tohz [63:0] $end
$var reg 64 n tolz [63:0] $end
$var reg 64 o tow [63:0] $end
$var reg 64 p tpd [63:0] $end
$var reg 64 q tpu [63:0] $end
$var reg 64 r trc [63:0] $end
$var reg 64 s twc [63:0] $end
$var reg 64 t twp1 [63:0] $end
$var reg 64 u twp2 [63:0] $end
$var reg 64 v twr [63:0] $end
$var reg 64 w twz [63:0] $end
$var reg 64 x write_CE_n_start_time [63:0] $end
$var reg 64 y write_CE_n_start_time1 [63:0] $end
$var reg 64 z write_WE_n_start_time [63:0] $end
$var reg 64 { write_WE_n_start_time1 [63:0] $end
$var reg 64 | write_address1_time [63:0] $end
$var reg 64 } write_address_time [63:0] $end
$var reg 64 ~ write_data1_time [63:0] $end
$var reg 64 !" write_data_time [63:0] $end
$upscope $end
$scope module base2 $end
$var wire 16 "" DataIO [15:0] $end
$var wire 1 #" LB_n $end
$var wire 1 $" UB_n $end
$var wire 1 7 WE_n $end
$var wire 1 8 OE_n $end
$var wire 1 9 CE_n $end
$var wire 20 %" Address [19:0] $end
$var reg 20 &" Address_read1 [19:0] $end
$var reg 20 '" Address_read2 [19:0] $end
$var reg 20 (" Address_write1 [19:0] $end
$var reg 20 )" Address_write2 [19:0] $end
$var reg 64 *" LB_n_start_time [63:0] $end
$var reg 64 +" UB_n_start_time [63:0] $end
$var reg 1 ," WE_dly $end
$var reg 1 -" activate_cebar $end
$var reg 1 ." activate_webar $end
$var reg 1 /" activate_wecebar $end
$var reg 16 0" dataIO1 [15:0] $end
$var reg 16 1" data_read [15:0] $end
$var reg 1 2" initiate_read1 $end
$var reg 1 3" initiate_read2 $end
$var reg 1 4" initiate_write1 $end
$var reg 1 5" initiate_write2 $end
$var reg 1 6" initiate_write3 $end
$var reg 64 7" read_CE_n_start_time [63:0] $end
$var reg 64 8" read_OE_n_start_time [63:0] $end
$var reg 64 9" read_WE_n_start_time [63:0] $end
$var reg 64 :" read_address_add [63:0] $end
$var reg 64 ;" read_address_oe [63:0] $end
$var reg 64 <" read_address_time [63:0] $end
$var reg 64 =" taa [63:0] $end
$var reg 64 >" tace [63:0] $end
$var reg 64 ?" tah [63:0] $end
$var reg 64 @" tas [63:0] $end
$var reg 64 A" taw [63:0] $end
$var reg 64 B" tba [63:0] $end
$var reg 64 C" tbhz [63:0] $end
$var reg 64 D" tblz [63:0] $end
$var reg 64 E" tbw [63:0] $end
$var reg 64 F" tchz [63:0] $end
$var reg 64 G" tclz [63:0] $end
$var reg 64 H" tcw [63:0] $end
$var reg 64 I" tdh [63:0] $end
$var reg 64 J" tdw [63:0] $end
$var reg 64 K" temptaa [63:0] $end
$var reg 64 L" temptoe [63:0] $end
$var reg 64 M" toe [63:0] $end
$var reg 64 N" toh [63:0] $end
$var reg 64 O" tohz [63:0] $end
$var reg 64 P" tolz [63:0] $end
$var reg 64 Q" tow [63:0] $end
$var reg 64 R" tpd [63:0] $end
$var reg 64 S" tpu [63:0] $end
$var reg 64 T" trc [63:0] $end
$var reg 64 U" twc [63:0] $end
$var reg 64 V" twp1 [63:0] $end
$var reg 64 W" twp2 [63:0] $end
$var reg 64 X" twr [63:0] $end
$var reg 64 Y" twz [63:0] $end
$var reg 64 Z" write_CE_n_start_time [63:0] $end
$var reg 64 [" write_CE_n_start_time1 [63:0] $end
$var reg 64 \" write_WE_n_start_time [63:0] $end
$var reg 64 ]" write_WE_n_start_time1 [63:0] $end
$var reg 64 ^" write_address1_time [63:0] $end
$var reg 64 _" write_address_time [63:0] $end
$var reg 64 `" write_data1_time [63:0] $end
$var reg 64 a" write_data_time [63:0] $end
$upscope $end
$scope module dut $end
$var wire 1 b" Flush_IF $end
$var wire 1 c" Flush_IF_and_ID $end
$var wire 1 d" MovNoWrite $end
$var wire 1 e" MovNoWrite_ID $end
$var wire 1 f" Stall $end
$var wire 32 g" base_ram_data [31:0] $end
$var wire 1 h" clk_10M $end
$var wire 1 < clock_btn $end
$var wire 32 i" dip_sw [31:0] $end
$var wire 1 j" dm9k_cmd $end
$var wire 1 k" dm9k_cs_n $end
$var wire 1 l" dm9k_int $end
$var wire 1 m" dm9k_ior_n $end
$var wire 1 n" dm9k_iow_n $end
$var wire 1 o" dm9k_pwrst_n $end
$var wire 16 p" dm9k_sd [15:0] $end
$var wire 32 q" ext_ram_data [31:0] $end
$var wire 23 r" flash_a [22:0] $end
$var wire 1 $ flash_byte_n $end
$var wire 1 % flash_ce_n $end
$var wire 16 s" flash_d [15:0] $end
$var wire 1 ' flash_oe_n $end
$var wire 1 ( flash_rp_n $end
$var wire 1 ) flash_vpen $end
$var wire 1 * flash_we_n $end
$var wire 16 t" leds [15:0] $end
$var wire 1 u" locked $end
$var wire 1 v" reset $end
$var wire 1 > reset_btn $end
$var wire 1 + rxd $end
$var wire 1 w" sl811_a0 $end
$var wire 1 x" sl811_cs_n $end
$var wire 1 y" sl811_dack_n $end
$var wire 1 z" sl811_drq_n $end
$var wire 1 {" sl811_intrq $end
$var wire 1 |" sl811_rd_n $end
$var wire 1 }" sl811_rst_n $end
$var wire 1 ~" sl811_wr_n $end
$var wire 4 !# touch_btn [3:0] $end
$var wire 1 , txd $end
$var wire 1 "# uart_dataready $end
$var wire 1 ## uart_tbre $end
$var wire 1 $# uart_tsre $end
$var wire 2 %# video_blue [1:0] $end
$var wire 1 &# video_clk $end
$var wire 1 '# video_de $end
$var wire 3 (# video_green [2:0] $end
$var wire 1 )# video_hsync $end
$var wire 3 *# video_red [2:0] $end
$var wire 1 +# video_vsync $end
$var wire 1 ,# uart_wrn $end
$var wire 1 -# uart_rdn $end
$var wire 1 . ext_ram_we_n $end
$var wire 1 / ext_ram_oe_n $end
$var wire 1 0 ext_ram_ce_n $end
$var wire 4 .# ext_ram_be_n [3:0] $end
$var wire 20 /# ext_ram_addr [19:0] $end
$var wire 8 0# dpy1 [7:0] $end
$var wire 8 1# dpy0 [7:0] $end
$var wire 1 5 clk_50M $end
$var wire 1 6 clk_11M0592 $end
$var wire 1 7 base_ram_we_n $end
$var wire 1 8 base_ram_oe_n $end
$var wire 1 9 base_ram_ce_n $end
$var wire 4 2# base_ram_be_n [3:0] $end
$var wire 20 3# base_ram_addr [19:0] $end
$var wire 5 4# WB_Registerw [4:0] $end
$var wire 1 5# WB_RegWrite $end
$var wire 32 6# WB_ReadData [31:0] $end
$var wire 32 7# WB_PC_4 [31:0] $end
$var wire 2 8# WB_MemtoReg [1:0] $end
$var wire 32 9# WB_ALU_out [31:0] $end
$var wire 1 :# Signed $end
$var wire 32 ;# PC_next [31:0] $end
$var wire 1 <# MovNoWrite_WB $end
$var wire 1 =# MovNoWrite_MEM $end
$var wire 1 ># MovNoWrite_EX $end
$var wire 5 ?# MEM_Registerw [4:0] $end
$var wire 1 @# MEM_RegWrite $end
$var wire 32 A# MEM_ReadData [31:0] $end
$var wire 32 B# MEM_PC_4 [31:0] $end
$var wire 2 C# MEM_MemtoReg [1:0] $end
$var wire 1 D# MEM_MemWrite $end
$var wire 1 E# MEM_MemRead $end
$var wire 32 F# MEM_Instruction [31:0] $end
$var wire 32 G# MEM_Data3 [31:0] $end
$var wire 32 H# MEM_Data2 [31:0] $end
$var wire 32 I# MEM_ALU_out [31:0] $end
$var wire 1 J# LuOp $end
$var wire 32 K# Jump_target [31:0] $end
$var wire 32 L# IF_PC_4 [31:0] $end
$var wire 32 M# IF_PC [31:0] $end
$var wire 32 N# IF_Instruction [31:0] $end
$var wire 1 O# ID_RegWrite $end
$var wire 2 P# ID_RegDst [1:0] $end
$var wire 32 Q# ID_PC_4 [31:0] $end
$var wire 3 R# ID_PCSrc [2:0] $end
$var wire 2 S# ID_MemtoReg [1:0] $end
$var wire 1 T# ID_MemWrite $end
$var wire 1 U# ID_MemRead $end
$var wire 32 V# ID_LU_out [31:0] $end
$var wire 32 W# ID_Instruction [31:0] $end
$var wire 32 X# ID_Data3 [31:0] $end
$var wire 32 Y# ID_Data2 [31:0] $end
$var wire 32 Z# ID_Data1 [31:0] $end
$var wire 1 [# ID_ALUSrc2 $end
$var wire 1 \# ID_ALUSrc1 $end
$var wire 4 ]# ID_ALUOp [3:0] $end
$var wire 2 ^# ForwardB [1:0] $end
$var wire 2 _# ForwardA [1:0] $end
$var wire 32 `# Ext_out [31:0] $end
$var wire 1 a# ExtOp $end
$var wire 1 b# Exception $end
$var wire 5 c# EX_Registerw [4:0] $end
$var wire 1 d# EX_RegWrite $end
$var wire 2 e# EX_RegDst [1:0] $end
$var wire 32 f# EX_PC_4 [31:0] $end
$var wire 3 g# EX_PCSrc [2:0] $end
$var wire 2 h# EX_MemtoReg [1:0] $end
$var wire 1 i# EX_MemWrite $end
$var wire 1 j# EX_MemRead $end
$var wire 32 k# EX_LU_out [31:0] $end
$var wire 32 l# EX_Instruction [31:0] $end
$var wire 32 m# EX_Data3 [31:0] $end
$var wire 32 n# EX_Data2w [31:0] $end
$var wire 32 o# EX_Data2 [31:0] $end
$var wire 32 p# EX_Data1w [31:0] $end
$var wire 32 q# EX_Data1 [31:0] $end
$var wire 32 r# EX_ALU_out [31:0] $end
$var wire 1 s# EX_ALUSrc2 $end
$var wire 1 t# EX_ALUSrc1 $end
$var wire 4 u# EX_ALUOp [3:0] $end
$var wire 1 v# DoRead $end
$var wire 32 w# Branch_target [31:0] $end
$var wire 1 x# Branch $end
$var wire 32 y# ALU_in2 [31:0] $end
$var wire 32 z# ALU_in1 [31:0] $end
$var wire 5 {# ALUToken [4:0] $end
$var reg 32 |# PC [31:0] $end
$var reg 1 }# ce $end
$var reg 1 ~# clk $end
$var reg 4 !$ count [3:0] $end
$var reg 16 "$ led_bits [15:0] $end
$var reg 8 #$ number [7:0] $end
$var reg 1 $$ reset_of_clk10M $end
$scope module EX_MEM $end
$var wire 5 %$ EX_Write_register [4:0] $end
$var wire 1 ~# clk $end
$var wire 1 v" reset $end
$var wire 1 ># MovNoWrite_EX $end
$var wire 1 d# EX_RegWrite $end
$var wire 32 &$ EX_PC_plus_4 [31:0] $end
$var wire 2 '$ EX_MemtoReg [1:0] $end
$var wire 1 i# EX_MemWrite $end
$var wire 1 j# EX_MemRead $end
$var wire 32 ($ EX_Instruction [31:0] $end
$var wire 32 )$ EX_Databus2 [31:0] $end
$var wire 32 *$ EX_ALU_out [31:0] $end
$var reg 32 +$ MEM_ALU_out [31:0] $end
$var reg 32 ,$ MEM_Databus2 [31:0] $end
$var reg 32 -$ MEM_Instruction [31:0] $end
$var reg 1 E# MEM_MemRead $end
$var reg 1 D# MEM_MemWrite $end
$var reg 2 .$ MEM_MemtoReg [1:0] $end
$var reg 32 /$ MEM_PC_plus_4 [31:0] $end
$var reg 1 @# MEM_RegWrite $end
$var reg 5 0$ MEM_Write_register [4:0] $end
$var reg 1 =# MovNoWrite_MEM $end
$upscope $end
$scope module ID_EX $end
$var wire 1 c" Flush_IF_and_ID $end
$var wire 32 1$ ID_Databus1 [31:0] $end
$var wire 32 2$ ID_Databus2 [31:0] $end
$var wire 32 3$ ID_LU_out [31:0] $end
$var wire 32 4$ IF_PC [31:0] $end
$var wire 1 e" MovNoWrite_ID $end
$var wire 1 f" Stall $end
$var wire 1 ~# clk $end
$var wire 1 v" reset $end
$var wire 1 O# ID_RegWrite $end
$var wire 2 5$ ID_RegDst [1:0] $end
$var wire 32 6$ ID_PC_plus_4 [31:0] $end
$var wire 3 7$ ID_PCSrc [2:0] $end
$var wire 2 8$ ID_MemtoReg [1:0] $end
$var wire 1 T# ID_MemWrite $end
$var wire 1 U# ID_MemRead $end
$var wire 32 9$ ID_Instruction [31:0] $end
$var wire 1 [# ID_ALUSrc2 $end
$var wire 1 \# ID_ALUSrc1 $end
$var wire 4 :$ ID_ALUOp [3:0] $end
$var reg 4 ;$ EX_ALUOp [3:0] $end
$var reg 1 t# EX_ALUSrc1 $end
$var reg 1 s# EX_ALUSrc2 $end
$var reg 32 <$ EX_Databus1 [31:0] $end
$var reg 32 =$ EX_Databus2 [31:0] $end
$var reg 32 >$ EX_Instruction [31:0] $end
$var reg 32 ?$ EX_LU_out [31:0] $end
$var reg 1 j# EX_MemRead $end
$var reg 1 i# EX_MemWrite $end
$var reg 2 @$ EX_MemtoReg [1:0] $end
$var reg 3 A$ EX_PCSrc [2:0] $end
$var reg 32 B$ EX_PC_plus_4 [31:0] $end
$var reg 2 C$ EX_RegDst [1:0] $end
$var reg 1 d# EX_RegWrite $end
$var reg 1 ># MovNoWrite_EX $end
$upscope $end
$scope module IF_ID $end
$var wire 1 D$ Flush $end
$var wire 32 E$ IF_PC [31:0] $end
$var wire 32 F$ IF_PC_plus_4 [31:0] $end
$var wire 1 f" Stall $end
$var wire 1 ~# clk $end
$var wire 1 v" reset $end
$var wire 32 G$ IF_Instruction [31:0] $end
$var reg 32 H$ ID_Instruction [31:0] $end
$var reg 32 I$ ID_PC_plus_4 [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 32 J$ MEM_ALU_out [31:0] $end
$var wire 2 K$ MEM_MemtoReg [1:0] $end
$var wire 32 L$ MEM_PC_plus_4 [31:0] $end
$var wire 1 @# MEM_RegWrite $end
$var wire 5 M$ MEM_Write_register [4:0] $end
$var wire 1 =# MovNoWrite_MEM $end
$var wire 1 ~# clk $end
$var wire 1 v" reset $end
$var wire 32 N$ MEM_ReadData [31:0] $end
$var reg 1 <# MovNoWrite_WB $end
$var reg 32 O$ WB_ALU_out [31:0] $end
$var reg 2 P$ WB_MemtoReg [1:0] $end
$var reg 32 Q$ WB_PC_plus_4 [31:0] $end
$var reg 32 R$ WB_ReadData [31:0] $end
$var reg 1 5# WB_RegWrite $end
$var reg 5 S$ WB_Write_register [4:0] $end
$upscope $end
$scope module alu $end
$var wire 6 T$ OpCode [5:0] $end
$var wire 32 U$ in1 [31:0] $end
$var wire 32 V$ in2 [31:0] $end
$var wire 1 W$ ss $end
$var wire 32 X$ out [31:0] $end
$var wire 1 Y$ lt_signed $end
$var wire 1 Z$ lt_31 $end
$var wire 1 :# Sign $end
$var wire 1 x# Branch $end
$var wire 5 [$ ALUCtl [4:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 4 \$ ALUOp [3:0] $end
$var wire 6 ]$ Funct [5:0] $end
$var wire 1 :# Sign $end
$var reg 5 ^$ ALUCtl [4:0] $end
$var reg 5 _$ aluFunct [4:0] $end
$upscope $end
$scope module control1 $end
$var wire 1 b# Exception $end
$var wire 32 `$ Instruction [31:0] $end
$var wire 1 a$ PC_31 $end
$var wire 1 O# RegWrite $end
$var wire 2 b$ RegDst [1:0] $end
$var wire 3 c$ PCSrc [2:0] $end
$var wire 6 d$ OpCode [5:0] $end
$var wire 2 e$ MemtoReg [1:0] $end
$var wire 1 T# MemWrite $end
$var wire 1 U# MemRead $end
$var wire 1 J# LuOp $end
$var wire 6 f$ Function [5:0] $end
$var wire 1 a# ExtOp $end
$var wire 1 v# DoRead $end
$var wire 1 [# ALUSrc2 $end
$var wire 1 \# ALUSrc1 $end
$var wire 4 g$ ALUOp [3:0] $end
$upscope $end
$scope module ram $end
$var wire 6 h$ Op [5:0] $end
$var wire 32 i$ base_ram_data [31:0] $end
$var wire 1 j$ clk $end
$var wire 32 k$ ext_ram_data [31:0] $end
$var wire 32 l$ inst [31:0] $end
$var wire 32 m$ inst_addr [31:0] $end
$var wire 1 }# inst_ce $end
$var wire 32 n$ mem_addr [31:0] $end
$var wire 1 o$ mem_ce $end
$var wire 32 p$ mem_data_i [31:0] $end
$var wire 1 D# mem_we $end
$var wire 1 v" rst $end
$var wire 1 f" stall $end
$var wire 1 "# uart_dataready $end
$var wire 1 -# uart_rdn $end
$var wire 1 ## uart_tbre $end
$var wire 1 $# uart_tsre $end
$var wire 1 ,# uart_wrn $end
$var wire 1 q$ uart_writable $end
$var wire 32 r$ read_from_ram_data [31:0] $end
$var wire 1 . ext_ram_we_n $end
$var wire 1 / ext_ram_oe_n $end
$var wire 1 0 ext_ram_ce_n $end
$var wire 4 s$ ext_ram_be_n [3:0] $end
$var wire 20 t$ ext_ram_addr [19:0] $end
$var wire 1 7 base_ram_we_n $end
$var wire 1 8 base_ram_oe_n $end
$var wire 1 9 base_ram_ce_n $end
$var wire 4 u$ base_ram_be_n [3:0] $end
$var wire 20 v$ base_ram_addr [19:0] $end
$var reg 1 w$ base_ext_sel $end
$var reg 4 x$ base_ram_be_n_reg [3:0] $end
$var reg 1 9 base_ram_ce_n_reg $end
$var reg 1 8 base_ram_oe_n_reg $end
$var reg 1 7 base_ram_we_n_reg $end
$var reg 4 y$ ext_ram_be_n_reg [3:0] $end
$var reg 1 0 ext_ram_ce_n_reg $end
$var reg 1 / ext_ram_oe_n_reg $end
$var reg 1 . ext_ram_we_n_reg $end
$var reg 32 z$ inner_ram_data [31:0] $end
$var reg 32 {$ inst_reg [31:0] $end
$var reg 32 |$ mem_data_o [31:0] $end
$var reg 1 }$ uart_rdn_reg $end
$var reg 1 ~$ uart_wrn_reg $end
$var reg 1 !% write_flag $end
$upscope $end
$scope module register $end
$var wire 1 v# DoRead $end
$var wire 5 "% Read_register1 [4:0] $end
$var wire 5 #% Read_register2 [4:0] $end
$var wire 1 5# RegWrite $end
$var wire 32 $% Write_data [31:0] $end
$var wire 5 %% Write_register [4:0] $end
$var wire 1 ~# clk $end
$var wire 1 v" reset $end
$var wire 32 &% Read_data2 [31:0] $end
$var wire 32 '% Read_data1 [31:0] $end
$var integer 32 (% i [31:0] $end
$upscope $end
$scope module segH $end
$var wire 4 )% iDIG [3:0] $end
$var wire 8 *% oSEG1 [7:0] $end
$var reg 7 +% oSEG [6:0] $end
$upscope $end
$scope module segL $end
$var wire 4 ,% iDIG [3:0] $end
$var wire 8 -% oSEG1 [7:0] $end
$var reg 7 .% oSEG [6:0] $end
$upscope $end
$upscope $end
$scope module ext1 $end
$var wire 20 /% Address [19:0] $end
$var wire 1 0 CE_n $end
$var wire 16 0% DataIO [15:0] $end
$var wire 1 1% LB_n $end
$var wire 1 / OE_n $end
$var wire 1 2% UB_n $end
$var wire 1 . WE_n $end
$var reg 20 3% Address_read1 [19:0] $end
$var reg 20 4% Address_read2 [19:0] $end
$var reg 20 5% Address_write1 [19:0] $end
$var reg 20 6% Address_write2 [19:0] $end
$var reg 64 7% LB_n_start_time [63:0] $end
$var reg 64 8% UB_n_start_time [63:0] $end
$var reg 1 9% WE_dly $end
$var reg 1 :% activate_cebar $end
$var reg 1 ;% activate_webar $end
$var reg 1 <% activate_wecebar $end
$var reg 16 =% dataIO1 [15:0] $end
$var reg 16 >% data_read [15:0] $end
$var reg 1 ?% initiate_read1 $end
$var reg 1 @% initiate_read2 $end
$var reg 1 A% initiate_write1 $end
$var reg 1 B% initiate_write2 $end
$var reg 1 C% initiate_write3 $end
$var reg 64 D% read_CE_n_start_time [63:0] $end
$var reg 64 E% read_OE_n_start_time [63:0] $end
$var reg 64 F% read_WE_n_start_time [63:0] $end
$var reg 64 G% read_address_add [63:0] $end
$var reg 64 H% read_address_oe [63:0] $end
$var reg 64 I% read_address_time [63:0] $end
$var reg 64 J% taa [63:0] $end
$var reg 64 K% tace [63:0] $end
$var reg 64 L% tah [63:0] $end
$var reg 64 M% tas [63:0] $end
$var reg 64 N% taw [63:0] $end
$var reg 64 O% tba [63:0] $end
$var reg 64 P% tbhz [63:0] $end
$var reg 64 Q% tblz [63:0] $end
$var reg 64 R% tbw [63:0] $end
$var reg 64 S% tchz [63:0] $end
$var reg 64 T% tclz [63:0] $end
$var reg 64 U% tcw [63:0] $end
$var reg 64 V% tdh [63:0] $end
$var reg 64 W% tdw [63:0] $end
$var reg 64 X% temptaa [63:0] $end
$var reg 64 Y% temptoe [63:0] $end
$var reg 64 Z% toe [63:0] $end
$var reg 64 [% toh [63:0] $end
$var reg 64 \% tohz [63:0] $end
$var reg 64 ]% tolz [63:0] $end
$var reg 64 ^% tow [63:0] $end
$var reg 64 _% tpd [63:0] $end
$var reg 64 `% tpu [63:0] $end
$var reg 64 a% trc [63:0] $end
$var reg 64 b% twc [63:0] $end
$var reg 64 c% twp1 [63:0] $end
$var reg 64 d% twp2 [63:0] $end
$var reg 64 e% twr [63:0] $end
$var reg 64 f% twz [63:0] $end
$var reg 64 g% write_CE_n_start_time [63:0] $end
$var reg 64 h% write_CE_n_start_time1 [63:0] $end
$var reg 64 i% write_WE_n_start_time [63:0] $end
$var reg 64 j% write_WE_n_start_time1 [63:0] $end
$var reg 64 k% write_address1_time [63:0] $end
$var reg 64 l% write_address_time [63:0] $end
$var reg 64 m% write_data1_time [63:0] $end
$var reg 64 n% write_data_time [63:0] $end
$upscope $end
$scope module ext2 $end
$var wire 20 o% Address [19:0] $end
$var wire 1 0 CE_n $end
$var wire 16 p% DataIO [15:0] $end
$var wire 1 q% LB_n $end
$var wire 1 / OE_n $end
$var wire 1 r% UB_n $end
$var wire 1 . WE_n $end
$var reg 20 s% Address_read1 [19:0] $end
$var reg 20 t% Address_read2 [19:0] $end
$var reg 20 u% Address_write1 [19:0] $end
$var reg 20 v% Address_write2 [19:0] $end
$var reg 64 w% LB_n_start_time [63:0] $end
$var reg 64 x% UB_n_start_time [63:0] $end
$var reg 1 y% WE_dly $end
$var reg 1 z% activate_cebar $end
$var reg 1 {% activate_webar $end
$var reg 1 |% activate_wecebar $end
$var reg 16 }% dataIO1 [15:0] $end
$var reg 16 ~% data_read [15:0] $end
$var reg 1 !& initiate_read1 $end
$var reg 1 "& initiate_read2 $end
$var reg 1 #& initiate_write1 $end
$var reg 1 $& initiate_write2 $end
$var reg 1 %& initiate_write3 $end
$var reg 64 && read_CE_n_start_time [63:0] $end
$var reg 64 '& read_OE_n_start_time [63:0] $end
$var reg 64 (& read_WE_n_start_time [63:0] $end
$var reg 64 )& read_address_add [63:0] $end
$var reg 64 *& read_address_oe [63:0] $end
$var reg 64 +& read_address_time [63:0] $end
$var reg 64 ,& taa [63:0] $end
$var reg 64 -& tace [63:0] $end
$var reg 64 .& tah [63:0] $end
$var reg 64 /& tas [63:0] $end
$var reg 64 0& taw [63:0] $end
$var reg 64 1& tba [63:0] $end
$var reg 64 2& tbhz [63:0] $end
$var reg 64 3& tblz [63:0] $end
$var reg 64 4& tbw [63:0] $end
$var reg 64 5& tchz [63:0] $end
$var reg 64 6& tclz [63:0] $end
$var reg 64 7& tcw [63:0] $end
$var reg 64 8& tdh [63:0] $end
$var reg 64 9& tdw [63:0] $end
$var reg 64 :& temptaa [63:0] $end
$var reg 64 ;& temptoe [63:0] $end
$var reg 64 <& toe [63:0] $end
$var reg 64 =& toh [63:0] $end
$var reg 64 >& tohz [63:0] $end
$var reg 64 ?& tolz [63:0] $end
$var reg 64 @& tow [63:0] $end
$var reg 64 A& tpd [63:0] $end
$var reg 64 B& tpu [63:0] $end
$var reg 64 C& trc [63:0] $end
$var reg 64 D& twc [63:0] $end
$var reg 64 E& twp1 [63:0] $end
$var reg 64 F& twp2 [63:0] $end
$var reg 64 G& twr [63:0] $end
$var reg 64 H& twz [63:0] $end
$var reg 64 I& write_CE_n_start_time [63:0] $end
$var reg 64 J& write_CE_n_start_time1 [63:0] $end
$var reg 64 K& write_WE_n_start_time [63:0] $end
$var reg 64 L& write_WE_n_start_time1 [63:0] $end
$var reg 64 M& write_address1_time [63:0] $end
$var reg 64 N& write_address_time [63:0] $end
$var reg 64 O& write_data1_time [63:0] $end
$var reg 64 P& write_data_time [63:0] $end
$upscope $end
$scope module osc $end
$var reg 1 6 clk_11M0592 $end
$var reg 1 5 clk_50M $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 Q& i [31:0] $end
$upscope $end
$scope begin $unm_blk_147 $end
$var integer 32 R& n_File_ID [31:0] $end
$var integer 32 S& n_Init_Size [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 T& i [31:0] $end
$upscope $end
$upscope $end
$scope begin $unm_blk_151 $end
$var integer 32 U& n_File_ID [31:0] $end
$var integer 32 V& n_Init_Size [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 W& i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 W&
b100 V&
b10000000000000000000000000000011 U&
b100000111001 T&
b100000111001 S&
b10000000000000000000000000000011 R&
b0 Q&
b0 P&
b0 O&
b0 N&
b0 M&
b0 L&
b0 K&
b0 J&
b0 I&
b101 H&
b0 G&
b1010 F&
b111 E&
b1010 D&
b1010 C&
b0 B&
b1010 A&
b11 @&
b0 ?&
b101 >&
b11 =&
b100 <&
b100 ;&
b1010 :&
b101 9&
b0 8&
b111 7&
b11 6&
b101 5&
b111 4&
b0 3&
b101 2&
b101 1&
b111 0&
b0 /&
b0 .&
b1010 -&
b1010 ,&
b0 +&
b0 *&
b0 )&
b0 (&
b0 '&
b0 &&
0%&
0$&
0#&
0"&
0!&
bz ~%
bx }%
0|%
0{%
0z%
1y%
b0 x%
b0 w%
bx v%
bx u%
bx t%
b0 s%
1r%
1q%
bz p%
b0 o%
b0 n%
b0 m%
b0 l%
b0 k%
b0 j%
b0 i%
b0 h%
b0 g%
b101 f%
b0 e%
b1010 d%
b111 c%
b1010 b%
b1010 a%
b0 `%
b1010 _%
b11 ^%
b0 ]%
b101 \%
b11 [%
b100 Z%
b100 Y%
b1010 X%
b101 W%
b0 V%
b111 U%
b11 T%
b101 S%
b111 R%
b0 Q%
b101 P%
b101 O%
b111 N%
b0 M%
b0 L%
b1010 K%
b1010 J%
b0 I%
b0 H%
b0 G%
b0 F%
b0 E%
b0 D%
0C%
0B%
0A%
0@%
0?%
bz >%
bx =%
0<%
0;%
0:%
19%
b0 8%
b0 7%
bx 6%
bx 5%
bx 4%
b0 3%
12%
11%
bz 0%
b0 /%
bx .%
bx0 -%
bx ,%
bx +%
bx0 *%
bx )%
b100000 (%
b0 '%
b0 &%
b0 %%
b0 $%
b0 #%
b0 "%
0!%
1~$
1}$
b0 |$
b0 {$
bz z$
b1111 y$
b1111 x$
1w$
b0 v$
b1111 u$
b0 t$
b1111 s$
bz r$
xq$
b0 p$
0o$
b0 n$
b10000000000000000000000000000000 m$
b0 l$
bz k$
zj$
bz i$
b0 h$
b100 g$
b0 f$
b0 e$
b0 d$
b0 c$
b0 b$
1a$
b0 `$
b10000 _$
b10 ^$
b0 ]$
b0 \$
b10 [$
0Z$
0Y$
b0 X$
0W$
b0 V$
b0 U$
b0 T$
b0 S$
b0 R$
b0 Q$
b0 P$
b0 O$
b0 N$
b0 M$
b0 L$
b0 K$
b0 J$
b10000000000000000000000000000000 I$
b0 H$
b0 G$
b10000000000000000000000000000100 F$
b10000000000000000000000000000100 E$
0D$
b0 C$
b10000000000000000000000000001000 B$
b0 A$
b0 @$
b0 ?$
b0 >$
b0 =$
b0 <$
b0 ;$
b100 :$
b0 9$
b0 8$
b0 7$
b10000000000000000000000000000000 6$
b0 5$
b10000000000000000000000000000100 4$
b0 3$
b0 2$
b0 1$
b0 0$
b0 /$
b0 .$
b0 -$
b0 ,$
b0 +$
b0 *$
b0 )$
b0 ($
b0 '$
b10000000000000000000000000001000 &$
b0 %$
x$$
bx #$
bx "$
b0 !$
0~#
0}#
b10000000000000000000000000000000 |#
b10 {#
b0 z#
b0 y#
0x#
b10000000000000000000000000001000 w#
1v#
b0 u#
0t#
0s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
0j#
0i#
b0 h#
b0 g#
b10000000000000000000000000001000 f#
b0 e#
0d#
b0 c#
0b#
1a#
b0 `#
b0 _#
b0 ^#
b100 ]#
1\#
0[#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
0U#
0T#
b0 S#
b0 R#
b10000000000000000000000000000000 Q#
b0 P#
1O#
b0 N#
b10000000000000000000000000000100 M#
b10000000000000000000000000000100 L#
b10000000000000000000000000000000 K#
0J#
b0 I#
b0 H#
b0 G#
b0 F#
0E#
0D#
b0 C#
b0 B#
b0 A#
0@#
b0 ?#
0>#
0=#
0<#
b10000000000000000000000000000100 ;#
1:#
b0 9#
b0 8#
b0 7#
b0 6#
05#
b0 4#
b0 3#
b1111 2#
bx0 1#
bx0 0#
b0 /#
b1111 .#
1-#
1,#
z+#
bz *#
z)#
bz (#
z'#
z&#
bz %#
z$#
z##
z"#
b0 !#
z~"
z}"
z|"
z{"
zz"
zy"
zx"
zw"
1v"
zu"
bx t"
bz s"
bz r"
bz q"
bz p"
zo"
zn"
zm"
zl"
zk"
zj"
b10 i"
zh"
bz g"
0f"
0e"
0d"
0c"
0b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b101 Y"
b0 X"
b1010 W"
b111 V"
b1010 U"
b1010 T"
b0 S"
b1010 R"
b11 Q"
b0 P"
b101 O"
b11 N"
b100 M"
b100 L"
b1010 K"
b101 J"
b0 I"
b111 H"
b11 G"
b101 F"
b111 E"
b0 D"
b101 C"
b101 B"
b111 A"
b0 @"
b0 ?"
b1010 >"
b1010 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
06"
05"
04"
03"
02"
bz 1"
bx 0"
0/"
0."
0-"
1,"
b0 +"
b0 *"
bx )"
bx ("
bx '"
b0 &"
b0 %"
1$"
1#"
bz ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b101 w
b0 v
b1010 u
b111 t
b1010 s
b1010 r
b0 q
b1010 p
b11 o
b0 n
b101 m
b11 l
b100 k
b100 j
b1010 i
b101 h
b0 g
b111 f
b11 e
b101 d
b111 c
b0 b
b101 a
b101 `
b111 _
b0 ^
b0 ]
b1010 \
b1010 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
0T
0S
0R
0Q
0P
bz O
bx N
0M
0L
0K
1J
b0 I
b0 H
bx G
bx F
bx E
b0 D
b0 C
1B
1A
bz @
b0 ?
1>
b10 =
0<
b0 ;
b1111 :
19
18
17
06
05
bx0 4
bx0 3
b0 2
b1111 1
10
1/
1.
bx -
z,
1+
z*
z)
z(
z'
bz &
z%
z$
bz #
bz "
bz !
$end
#1
0r%
0q%
02%
01%
0$"
0#"
0B
0A
bz N#
bz G$
bz l$
bz {$
b0 1
b0 .#
b0 s$
b0 y$
08
09
b0 :
b0 2#
b0 u$
b0 x$
1}#
0v"
0>
#101
1<
#201
b1 Q&
0<
#301
1<
#401
b10 Q&
0<
#501
1<
#601
b11 Q&
0<
#701
1<
#801
b100 Q&
0<
#901
1<
#1001
b101 Q&
0<
#1101
1<
#1201
b110 Q&
0<
#1301
1<
#1401
b111 Q&
0<
#1501
1<
#1601
b1000 Q&
0<
#1701
1<
#1801
b1001 Q&
0<
#1901
1<
#2001
b1010 Q&
0<
#2101
1<
#2201
b1011 Q&
0<
#2301
1<
#2401
b1100 Q&
0<
#2501
1<
#2601
b1101 Q&
0<
#2701
1<
#2801
b1110 Q&
0<
#2901
1<
#3001
b1111 Q&
0<
#3101
1<
#3201
b10000 Q&
0<
#3301
1<
#3401
b10001 Q&
0<
#3501
1<
#3601
b10010 Q&
0<
#3701
1<
#3801
b10011 Q&
0<
#3901
1<
#4001
b10100 Q&
0<
#10000
b111100000110101000000000000000 N#
b111100000110101000000000000000 G$
b111100000110101000000000000000 l$
b111100000110101000000000000000 {$
b1010 y
b1010 {
b1010 !"
b1010 ["
b1010 ]"
b1010 a"
b111100000110101000000000000000 r$
b1000000000000000 @
b11110000011010 ""
b111100000110101000000000000000 !
b111100000110101000000000000000 g"
b111100000110101000000000000000 i$
b11110000011010 1"
b1000000000000000 O
03"
b0 '"
0Q
b0 E
15
#11000
03"
0Q
#12000
03"
0Q
#13000
03"
0Q
#14000
03"
0Q
#15000
03"
0Q
#16000
03"
0Q
#17000
03"
0Q
#18000
03"
0Q
#19000
03"
0Q
#20000
03"
0Q
05
#21000
03"
0Q
#22000
03"
0Q
#23000
03"
0Q
#24000
03"
0Q
#25000
03"
0Q
#26000
03"
0Q
#27000
03"
0Q
#28000
03"
0Q
#29000
03"
0Q
#30000
03"
0Q
15
#31000
03"
0Q
#32000
03"
0Q
#33000
03"
0Q
#34000
03"
0Q
#35000
03"
0Q
#36000
03"
0Q
#37000
03"
0Q
#38000
03"
0Q
#39000
03"
0Q
#40000
03"
0Q
05
#41000
03"
0Q
#42000
03"
0Q
#43000
03"
0Q
#44000
03"
0Q
#45000
03"
0Q
#45211
b1 !$
16
#46000
03"
0Q
#47000
03"
0Q
#48000
03"
0Q
#49000
03"
0Q
#50000
03"
0Q
15
#51000
03"
0Q
#52000
03"
0Q
#53000
03"
0Q
#54000
03"
0Q
#55000
03"
0Q
#56000
03"
0Q
#57000
03"
0Q
#58000
03"
0Q
#59000
03"
0Q
#60000
03"
0Q
05
#61000
03"
0Q
#62000
03"
0Q
#63000
03"
0Q
#64000
03"
0Q
#65000
03"
0Q
#66000
03"
0Q
#67000
03"
0Q
#68000
03"
0Q
#69000
03"
0Q
#70000
03"
0Q
15
#71000
03"
0Q
#72000
03"
0Q
#73000
03"
0Q
#74000
03"
0Q
#75000
03"
0Q
#76000
03"
0Q
#77000
03"
0Q
#78000
03"
0Q
#79000
03"
0Q
#80000
03"
0Q
05
#81000
03"
0Q
#82000
03"
0Q
#83000
03"
0Q
#84000
03"
0Q
#85000
03"
0Q
#86000
03"
0Q
#87000
03"
0Q
#88000
03"
0Q
#89000
03"
0Q
#90000
03"
0Q
15
#90422
06
#91000
03"
0Q
#92000
03"
0Q
#93000
03"
0Q
#94000
03"
0Q
#95000
03"
0Q
#96000
03"
0Q
#97000
03"
0Q
#98000
03"
0Q
#99000
03"
0Q
#100000
03"
0Q
05
#101000
03"
0Q
#102000
03"
0Q
#103000
03"
0Q
#104000
03"
0Q
#105000
03"
0Q
#106000
03"
0Q
#107000
03"
0Q
#108000
03"
0Q
#109000
03"
0Q
#110000
03"
0Q
15
#111000
03"
0Q
#112000
03"
0Q
#113000
03"
0Q
#114000
03"
0Q
#115000
03"
0Q
#116000
03"
0Q
#117000
03"
0Q
#118000
03"
0Q
#119000
03"
0Q
#120000
03"
0Q
05
#121000
03"
0Q
#122000
03"
0Q
#123000
03"
0Q
#124000
03"
0Q
#125000
03"
0Q
#126000
03"
0Q
#127000
03"
0Q
#128000
03"
0Q
#129000
03"
0Q
#130000
03"
0Q
15
#131000
03"
0Q
#132000
03"
0Q
#133000
03"
0Q
#134000
03"
0Q
#135000
03"
0Q
#135633
b10 !$
16
#136000
03"
0Q
#137000
03"
0Q
#138000
03"
0Q
#139000
03"
0Q
#140000
03"
0Q
05
#141000
03"
0Q
#142000
03"
0Q
#143000
03"
0Q
#144000
03"
0Q
#145000
03"
0Q
#146000
03"
0Q
#147000
03"
0Q
#148000
03"
0Q
#149000
03"
0Q
#150000
03"
0Q
15
#151000
03"
0Q
#152000
03"
0Q
#153000
03"
0Q
#154000
03"
0Q
#155000
03"
0Q
#156000
03"
0Q
#157000
03"
0Q
#158000
03"
0Q
#159000
03"
0Q
#160000
03"
0Q
05
#161000
03"
0Q
#162000
03"
0Q
#163000
03"
0Q
#164000
03"
0Q
#165000
03"
0Q
#166000
03"
0Q
#167000
03"
0Q
#168000
03"
0Q
#169000
03"
0Q
#170000
03"
0Q
15
#171000
03"
0Q
#172000
03"
0Q
#173000
03"
0Q
#174000
03"
0Q
#175000
03"
0Q
#176000
03"
0Q
#177000
03"
0Q
#178000
03"
0Q
#179000
03"
0Q
#180000
03"
0Q
05
#180844
06
#181000
03"
0Q
#182000
03"
0Q
#183000
03"
0Q
#184000
03"
0Q
#185000
03"
0Q
#186000
03"
0Q
#187000
03"
0Q
#188000
03"
0Q
#189000
03"
0Q
#190000
03"
0Q
15
#191000
03"
0Q
#192000
03"
0Q
#193000
03"
0Q
#194000
03"
0Q
#195000
03"
0Q
#196000
03"
0Q
#197000
03"
0Q
#198000
03"
0Q
#199000
03"
0Q
#200000
05
